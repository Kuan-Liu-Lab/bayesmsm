[{"path":"https://kuan-liu-lab.github.io/bayesmsm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 bayesmsm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-censoring.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"`bayesmsm` for longitudinal data with informative right-censoring","text":"bayesmsm package enables easy implementation Bayesian marginal structural models (BMSMs) longitudinal data. methodology BMSMs can divided 2 estimation steps: Step 1. Bayesian treatment effect weight estimation Step 2. Bayesian non-parametric bootstrap maximize utility function respect causal effect Step 1, estimate treatment weights wijw_{ij} using posterior samples α\\alpha β\\beta via fitting series logistic regressions Bayesian framework. package able handle longitudinal data without right-censoring. Step 2, Pn(vij)P_n(v_{ij}) estimated via non-parametric Bayesian bootstrap Dir(1,...,1)Dir(1,...,1) sampling weights. main functions package include: bayesweight: Calculates Bayesian weights subject-specific treatment effects. bayesweight_cen: Calculates Bayesian weights subject-specific treatment effects right-censored data. bayesmsm: Estimates marginal structural models using calculated Bayesian weights. plot_ATE: Plots estimated Average Treatment Effect (ATE). plot_APO: Plots estimated Average Potential Outcome (APO). plot_est_box: Plots distribution estimated treatment effects. summary_bayesmsm: Summarizes model results bayesmsm. simData: Generates synthetic longitudinal data optional right-censoring Installation install bayesmsm package, can use devtools package install directly GitHub.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-censoring.html","id":"simulated-longitudinal-observational-data-with-right-censoring","dir":"Articles","previous_headings":"","what":"Simulated longitudinal observational data with right-censoring","title":"`bayesmsm` for longitudinal data with informative right-censoring","text":"vignette, demonstrate simulate longitudinal dataset replicates features real-world clinical studies right-censoring using simData(). , generate data 200 individuals observed 2 visits. visit, two normally distributed covariates (L1_j, L2_j) binary treatment assignment (A_j) created. Right-censoring induced visit via logistic model (C_j), individual censored visit j, subsequent covariates, treatments, end--study outcome Y set NA. outcome Y binary, drawn logistic regression full covariate treatment history.","code":"# 1) Define coefficient lists for 2 visits amodel <- list(   # Visit 1: logit P(A1=1) = -0.3 + 0.4*L1_1 - 0.2*L2_1   c(\"(Intercept)\" = -0.3, \"L1_1\" = 0.4, \"L2_1\" = -0.2),   # Visit 2: logit P(A2=1) = -0.1 + 0.3*L1_2 - 0.1*L2_2 + 0.5*A_prev   c(\"(Intercept)\" = -0.1, \"L1_2\" = 0.3, \"L2_2\" = -0.1, \"A_prev\" = 0.5) )  # 2) Define outcome model: logistic on treatments and last covariates ymodel <- c(   \"(Intercept)\" = -0.8,   \"A1\"          = 0.2,   \"A2\"          = 0.4,   \"L1_2\"        = 0.3,   \"L2_2\"        = -0.3 )  # 3) Define right-censoring models at each visit cmodel <- list(   # Censor at visit 1 based on baseline covariates and A1   c(\"(Intercept)\" = -1.5, \"L1_1\" = 0.2, \"L2_1\" = -0.2, \"A\" = 0.2),   # Censor at visit 2 based on visit-2 covariates and A2   c(\"(Intercept)\" = -1.5, \"L1_2\" = 0.1, \"L2_2\" = -0.1, \"A\" = 0.3) )  # 4) Load package and simulate data simdat_cen <- simData(   n                = 100,   n_visits         = 2,   covariate_counts = c(2, 2),   amodel           = amodel,   ymodel           = ymodel,   y_type           = \"binary\",   right_censor     = TRUE,   cmodel           = cmodel,   seed             = 123 )  # 5) Inspect first rows head(simdat_cen) #>          L1_1        L2_1 A1 C1       L1_2        L2_2 A2 C2  Y #> 1 -0.56047565 -0.71040656  1  0 -0.7152422 -0.07355602  1  1 NA #> 2 -0.23017749  0.25688371  0  0 -0.7526890 -1.16865142  1  0  1 #> 3  1.55870831 -0.24669188  0  0 -0.9385387 -0.63474826  0  0  0 #> 4  0.07050839 -0.34754260  1  0 -1.0525133 -0.02884155  0  0  1 #> 5  0.12928774 -0.95161857  0  0 -0.4371595  0.67069597  1  1 NA #> 6  1.71506499 -0.04502772  1  0  0.3311792 -1.65054654  1  0  0"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-censoring.html","id":"bayesian-treatment-effect-weight-estimation-using-bayesweight_cen","dir":"Articles","previous_headings":"","what":"Bayesian treatment effect weight estimation using bayesweight_cen","title":"`bayesmsm` for longitudinal data with informative right-censoring","text":"Next, use bayesweight_cen function estimate weights censoring. specify treatment censoring models time point, including relevant covariates. trtmodel.list: list formulas corresponding time point time-specific treatment variable left hand side pre-treatment covariates balanced right hand side. Interactions functions covariates allowed. cenmodel.list: list formulas censoring model censoring indicators left hand side covariates prior censoring indicators right hand side. data: dataset containing variables specified trtmodel.list. n.chains: Number MCMC chains run. non-parallel execution, set 1. parallel execution, requires least 2 chains. n.iter: Total number iterations chain (including burn-). n.burnin: Number iterations discard beginning simulation (burn-). n.thin: Thinning rate MCMC sampler. seed: Seed ensure reproducibility. parallel: Logical flag indicating whether run MCMC chains parallel. Default TRUE. Similarly, function automatically run MCMC JAGS based specified treatment censoring model inputs, generating JAGS model string part function output. function returns list containing updated weights subject-specific treatment censoring effects well JAGS model. can print view JAGS model stored model_string function output:","code":"weights_cen <- bayesweight_cen(   trtmodel.list = list(     A1 ~ L1_1 + L2_1,     A2 ~ L1_2 + L2_2 + A1),   cenmodel.list = list(     C1 ~ L1_1 + L2_1 + A1,     C2 ~ L1_2 + L2_2 + A2),   data = simdat_cen,   n.chains = 1,   n.iter = 200,   n.burnin = 100,   n.thin = 1,   seed = 890123,   parallel = FALSE) #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 700 #>    Unobserved stochastic nodes: 21 #>    Total graph size: 2495 #>  #> Initializing model  summary(weights_cen$weights) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.6241  1.2029  1.9547  2.7377  2.9418 18.9279      25 cat(weights_cen$model_string) #> model{ #>  #> for (i in 1:N1) { #>  #> # conditional model; #> A1[i] ~ dbern(p1[i]) #> logit(p1[i]) <- b10 + b11*L1_1[i] + b12*L2_1[i] #> C1[i] ~ dbern(cp1[i]) #> logit(cp1[i]) <- s10 + s11*L1_1[i] + s12*L2_1[i] + s13*A1[i] #>  #> # marginal model; #> A1s[i] ~ dbern(p1s[i]) #> logit(p1s[i]) <- bs10 #> C1s[i] ~ dbern(cp1s[i]) #> logit(cp1s[i]) <- ts10 #> } #>  #> for (i in 1:N2) { #>  #> # conditional model; #> A2[i] ~ dbern(p2[i]) #> logit(p2[i]) <- b20 + b21*L1_2[i] + b22*L2_2[i] + b23*A1[i] #> C2[i] ~ dbern(cp2[i]) #> logit(cp2[i]) <- s20 + s21*L1_2[i] + s22*L2_2[i] + s23*A2[i] #>  #> # marginal model; #> A2s[i] ~ dbern(p2s[i]) #> logit(p2s[i]) <- bs20 + bs21*A1s[i] #> C2s[i] ~ dbern(cp2s[i]) #> logit(cp2s[i]) <- ts20 + ts21*A1s[i] #> } #>  #> # Priors #> b10 ~ dunif(-10, 10) #> b11 ~ dunif(-10, 10) #> b12 ~ dunif(-10, 10) #> s10 ~ dunif(-10, 10) #> s11 ~ dunif(-10, 10) #> s12 ~ dunif(-10, 10) #> s13 ~ dunif(-10, 10) #> bs10 ~ dunif(-10, 10) #> ts10 ~ dunif(-10, 10) #> b20 ~ dunif(-10, 10) #> b21 ~ dunif(-10, 10) #> b22 ~ dunif(-10, 10) #> b23 ~ dunif(-10, 10) #> s20 ~ dunif(-10, 10) #> s21 ~ dunif(-10, 10) #> s22 ~ dunif(-10, 10) #> s23 ~ dunif(-10, 10) #> bs20 ~ dunif(-10, 10) #> bs21 ~ dunif(-10, 10) #> ts20 ~ dunif(-10, 10) #> ts21 ~ dunif(-10, 10) #> }"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-censoring.html","id":"bayesian-non-parametric-bootstrap-to-maximize-the-utility-function-with-respect-to-the-causal-effect-using-bayesmsm","dir":"Articles","previous_headings":"","what":"Bayesian non-parametric bootstrap to maximize the utility function with respect to the causal effect using bayesmsm","title":"`bayesmsm` for longitudinal data with informative right-censoring","text":"Using weights estimated bayesweight_cen, now fit Bayesian Marginal Structural Model estimate marginal treatment effects using bayesmsm function . specify outcome model relevant parameters. ymodel: formula representing outcome model, can include interactions functions covariates. nvisit: Specifies number visits time points considered model. reference: baseline reference intervention across visits, typically represented vector zeros indicating treatment (default vector zeros). comparator: comparison intervention across visits, typically represented vector ones indicating full treatment (default vector ones). treatment_effect_type: character string specifying type treatment effect estimate. Options “sq” sequential treatment effects, estimates effects specific treatment sequences across visits, “cum” cumulative treatment effects, assumes single cumulative treatment variable representing total exposure. default “sq”. family: Specifies outcome distribution family; use “gaussian” continuous outcomes “binomial” binary outcomes (default “gaussian”). data: dataset containing variables required model. wmean: vector treatment assignment weights. Default vector ones, implying equal weighting. nboot: number bootstrap iterations perform estimating uncertainty around causal estimates. optim_method: optimization method used find best parameters model (default ‘BFGS’). seed: seed value ensure reproducibility results. parallel: logical flag indicating whether perform computations parallel (default TRUE). ncore: number cores use parallel computation (default 4). bayesmsm function returns model object containing following: mean, standard deviation, 95% credible interval Risk Difference (RD), Risk Ratio (RR), Odds Ratio (). also includes data frame containing bootstrap samples reference effect, comparator effect, RD, RR, , well reference comparator levels chosen user. summary_bayesmsm function automatically generates summary table model output function bayesmsm.","code":"# Remove all NAs (censored observations) from the original dataset and weights simdat_cen$weights <- weights_cen$weights simdat_cen2 <- na.omit(simdat_cen)  model <- bayesmsm(ymodel = Y ~ A1 + A2,   nvisit = 2,   reference = c(rep(0,2)),   comparator = c(rep(1,2)),   family = \"binomial\",   data = simdat_cen2,   wmean = simdat_cen2$weights,   nboot = 50,   optim_method = \"BFGS\",   parallel = TRUE,   seed = 890123,   ncore = 2) str(model) #> List of 12 #>  $ RD_mean    : num 0.146 #>  $ RR_mean    : num 2.51 #>  $ OR_mean    : num 4.36 #>  $ RD_sd      : num 0.22 #>  $ RR_sd      : num 2.25 #>  $ OR_sd      : num 5.96 #>  $ RD_quantile: Named num [1:2] -0.215 0.516 #>   ..- attr(*, \"names\")= chr [1:2] \"2.5%\" \"97.5%\" #>  $ RR_quantile: Named num [1:2] 0.453 8.895 #>   ..- attr(*, \"names\")= chr [1:2] \"2.5%\" \"97.5%\" #>  $ OR_quantile: Named num [1:2] 0.345 15.914 #>   ..- attr(*, \"names\")= chr [1:2] \"2.5%\" \"97.5%\" #>  $ bootdata   :'data.frame': 50 obs. of  5 variables: #>   ..$ effect_reference : num [1:50] -0.791 -0.651 -0.741 -0.877 -1.844 ... #>   ..$ effect_comparator: num [1:50] -1.098 -1.939 -0.379 -1.481 -0.831 ... #>   ..$ RD               : num [1:50] -0.0619 -0.2169 0.0835 -0.1085 0.1669 ... #>   ..$ RR               : num [1:50] 0.802 0.367 1.259 0.631 2.222 ... #>   ..$ OR               : num [1:50] 0.736 0.276 1.436 0.547 2.755 ... #>  $ reference  : num [1:2] 0 0 #>  $ comparator : num [1:2] 1 1 summary_bayesmsm(model) #>                  mean        sd       2.5%      97.5% #> Reference  -1.4320309 0.6712919 -2.7921195 -0.1847785 #> Comparator -0.6362027 0.6711850 -1.7496915  0.5551147 #> RD          0.1463972 0.2199628 -0.2150885  0.5155204 #> RR          2.5137979 2.2490552  0.4526227  8.8946165 #> OR          4.3640132 5.9617061  0.3449483 15.9140163"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-censoring.html","id":"visualization-functions-plot_ate-plot_apo-plot_est_box","dir":"Articles","previous_headings":"","what":"Visualization functions: plot_ATE, plot_APO, plot_est_box","title":"`bayesmsm` for longitudinal data with informative right-censoring","text":"Similarly, can use built-functions well summary_bayesmsm visualize summarize results. plot_ATE function generates plot estimated ATE 95% credible interval.  plot_APO function plots estimated APO reference comparator level effects.   plot_est_box function generates error bar plot estimated treatment effects (APO ATE) bootstrap samples.","code":"plot_ATE(model) plot_APO(model, effect_type = \"effect_comparator\") plot_APO(model, effect_type = \"effect_reference\") plot_est_box(model)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-censoring.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"`bayesmsm` for longitudinal data with informative right-censoring","text":"Saarela, O., Stephens, D. ., Moodie, E. E. M., & Klein, M. B. (2015). Bayesian estimation marginal structural models. Biometrics, 71(2), 279–288. https://doi.org/10.1111/biom.12269 Robins, J. M., Hernán, M. ., & Brumback, B. (2000). Marginal structural models causal inference epidemiology. Epidemiology, 11(5), 550–560. https://doi.org/10.1097/00001648-200009000-00011 Liu, K., Saarela, O., Feldman, B. M., & Pullenayegum, E. (2020). Estimation causal effects repeatedly measured outcomes Bayesian framework. Statistical Methods Medical Research, 29(9), 2507–2519. https://doi.org/10.1177/0962280219900362","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-nocensoring.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"`bayesmsm` for longitudinal data without right-censoring","text":"bayesmsm package enables easy implementation Bayesian marginal structural models (BMSMs) longitudinal data. methodology BMSMs can divided 2 estimation steps: Step 1. Bayesian treatment effect weight estimation Step 2. Bayesian non-parametric bootstrap maximize utility function respect causal effect Step 1, estimate treatment weights wijw_{ij} using posterior samples α\\alpha β\\beta via fitting series logistic regressions Bayesian framework. package able handle longitudinal data without right-censoring. Step 2, Pn(vij)P_n(v_{ij}) estimated via non-parametric Bayesian bootstrap Dir(1,...,1)Dir(1,...,1) sampling weights. main functions package include: bayesweight: Calculates Bayesian weights subject-specific treatment effects. bayesweight_cen: Calculates Bayesian weights subject-specific treatment effects right-censored data. bayesmsm: Estimates marginal structural models using calculated Bayesian weights. plot_ATE: Plots estimated Average Treatment Effect (ATE). plot_APO: Plots estimated Average Potential Outcome (APO). plot_est_box: Plots distribution estimated treatment effects. summary_bayesmsm: Summarizes model results bayesmsm. simData: Generates synthetic longitudinal data optional right-censoring Installation install bayesmsm package, can use devtools package install directly GitHub.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-nocensoring.html","id":"simulated-longitudinal-observational-data-without-right-censoring","dir":"Articles","previous_headings":"","what":"Simulated longitudinal observational data without right-censoring","title":"`bayesmsm` for longitudinal data without right-censoring","text":"vignette, demonstrate simulate clean longitudinal dataset without censoring using simData(). generate data 200 individuals observed 2 visits. visit, two normally distributed covariates (L1_j, L2_j) binary treatment assignment (A_j) created. censoring applied, covariates, treatments, final outcome Y fully observed. outcome Y continuous, generated linear model covariate treatment history. Suppose causal parameter interest average treatment effect always treated never treated, ATE=E(Y∣A1=1,A2=1)−E(Y∣A1=0,A2=0) ATE = E(Y \\mid A_1 = 1, A_2 = 1) - E(Y \\mid A_1 = 0, A_2 = 0)","code":"# 1) Define coefficient lists for 2 visits amodel <- list(   # Visit 1: logit P(A1=1) = -0.3 + 0.4*L1_1 - 0.2*L2_1   c(\"(Intercept)\" = -0.3, \"L1_1\" = 0.4, \"L2_1\" = -0.2),   # Visit 2: logit P(A2=1) = -0.1 + 0.3*L1_2 - 0.1*L2_2 + 0.5*A_prev   c(\"(Intercept)\" = -0.1, \"L1_2\" = 0.3, \"L2_2\" = -0.1, \"A_prev\" = 0.5) )  # 2) Define binary outcome model: logistic on treatments and last covariates ymodel <- c(   \"(Intercept)\" = -0.8,   \"A1\"          = 0.2,   \"A2\"          = 0.4,   \"L1_2\"        = 0.3,   \"L2_2\"        = -0.3 )  # 3) Load package and simulate data without censoring simdat <- simData(   n                = 100,   n_visits         = 2,   covariate_counts = c(2, 2),   amodel           = amodel,   ymodel           = ymodel,   y_type           = \"binary\",   right_censor     = FALSE,   seed             = 123 )  # 4) Inspect first rows head(simdat) #>          L1_1        L2_1 A1        L1_2       L2_2 A2 Y #> 1 -0.56047565 -0.71040656  1 -0.37560287  1.0149432  0 0 #> 2 -0.23017749  0.25688371  0 -0.56187636 -1.9927485  1 0 #> 3  1.55870831 -0.24669188  0 -0.34391723 -0.4272793  1 0 #> 4  0.07050839 -0.34754260  1  0.09049665  0.1166373  1 1 #> 5  0.12928774 -0.95161857  0  1.59850877 -0.8932076  0 1 #> 6  1.71506499 -0.04502772  1 -0.08856511  0.3339029  1 0"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-nocensoring.html","id":"bayesian-treatment-effect-weight-estimation-using-bayesweight","dir":"Articles","previous_headings":"","what":"Bayesian treatment effect weight estimation using bayesweight","title":"`bayesmsm` for longitudinal data without right-censoring","text":"Non-parallel computing requires n.chains = 1. Parallel MCMC requires least 2 chains computing running 1 core per chain, recommend using 2 chains less number available cores computer. Running function automatically saves JAGS model file working directory, user can check review model specifications. trtmodel.list: list formulas corresponding time point time-specific treatment variable left hand side pre-treatment covariates balanced right hand side. Interactions functions covariates allowed. data: dataset containing variables specified trtmodel.list. n.chains: Number MCMC chains run. non-parallel execution, set 1. parallel execution, requires least 2 chains. n.iter: Total number iterations chain (including burn-). n.burnin: Number iterations discard beginning simulation (burn-). n.thin: Thinning rate MCMC sampler. seed: Seed ensure reproducibility. parallel: Logical flag indicating whether run MCMC chains parallel. Default TRUE. weights: calculated weights subject-specific treatment effects, computed taking average weights across MCMC iterations. model_string: character JAGS model based input argument trtmodel.list. can print view JAGS model stored model_string function output:","code":"weights <- bayesweight(   trtmodel.list = list(     A1 ~ L1_1 + L2_1,     A2 ~ L1_2 + L2_2 + A1),   data = simdat,   n.chains = 1,   n.iter = 200,   n.burnin = 100,   n.thin = 1,   seed = 890123,   parallel = FALSE) #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 400 #>    Unobserved stochastic nodes: 10 #>    Total graph size: 1824 #>  #> Initializing model  summary(weights) #>              Length Class  Mode      #> weights      100    -none- numeric   #> model_string   1    -none- character cat(weights$model_string) #> model{ #> #N = nobs #> for(i in 1:N){ #>  #> # visit 1; #> # marginal treatment assignment model, visit 1; #> A1s[i] ~ dbern(pA1s[i]) #> pA1s[i] <- ilogit(bs10) #>  #> # conditional treatment assignment model, visit 1; #> A1[i] ~ dbern(pA1[i]) #> pA1[i] <- ilogit(b10 + b11*L1_1[i] + b12*L2_1[i]) #>  #> # visit 2; #> # marginal treatment assignment model, visit 2; #> A2s[i] ~ dbern(pA2s[i]) #> pA2s[i] <- ilogit(bs20 + bs21*A1s[i]) #>  #> # conditional treatment assignment model, visit 2; #> A2[i] ~ dbern(pA2[i]) #> pA2[i] <- ilogit(b20 + b21*L1_2[i] + b22*L2_2[i] + b23*A1[i]) #>  #> # export quantity in full posterior specification; #> w[i] <- (pA1s[i]*pA2s[i])/(pA1[i]*pA2[i]) #> } #>  #> #prior; #> bs10~dnorm(0,.01) #> b10~dnorm(0,.01) #> b11~dnorm(0,.01) #> b12~dnorm(0,.01) #> bs20~dnorm(0,.01) #> bs21~dnorm(0,.01) #> b20~dnorm(0,.01) #> b21~dnorm(0,.01) #> b22~dnorm(0,.01) #> b23~dnorm(0,.01) #> }"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-nocensoring.html","id":"bayesian-non-parametric-bootstrap-to-maximize-the-utility-function-with-respect-to-the-causal-effect-using-bayesmsm","dir":"Articles","previous_headings":"","what":"Bayesian non-parametric bootstrap to maximize the utility function with respect to the causal effect using bayesmsm","title":"`bayesmsm` for longitudinal data without right-censoring","text":"function bayesmsm estimates causal effect time-varying treatments. uses subject-specific treatment assignment weights weights calculated using bayesweight, performs Bayesian non-parametric bootstrap estimate causal parameters. ymodel: formula representing outcome model, can include interactions functions covariates. nvisit: Specifies number visits time points considered model. reference: baseline reference intervention across visits, typically represented vector zeros indicating treatment (default vector zeros). comparator: comparison intervention across visits, typically represented vector ones indicating full treatment (default vector ones). treatment_effect_type: character string specifying type treatment effect estimate. Options “sq” sequential treatment effects, estimates effects specific treatment sequences across visits, “cum” cumulative treatment effects, assumes single cumulative treatment variable representing total exposure. default “sq”. family: Specifies outcome distribution family; use “gaussian” continuous outcomes “binomial” binary outcomes (default “gaussian”). data: dataset containing variables required model. wmean: vector treatment assignment weights. Default vector ones, implying equal weighting. nboot: number bootstrap iterations perform estimating uncertainty around causal estimates. optim_method: optimization method used find best parameters model (default ‘BFGS’). seed: seed value ensure reproducibility results. parallel: logical flag indicating whether perform computations parallel (default TRUE). ncore: number cores use parallel computation (default 4). mean, sd, quantile: mean, standard deviation 95% credible interval estimated causal effect (ATE). results, mean ATE approximately -3.161, indicates expected outcome always treated patients , average, 3.161 units less never treated patients. bootdata: data frame containing bootstrap samples reference effect, comparator effect, average treatment effect (ATE). reference, comparator: reference level comparator level user chooses compare. reference level never treated (0,0), comparator level always treated (1,1). summary_bayesmsm function automatically generates summary table model output function bayesmsm.","code":"model <- bayesmsm(ymodel = Y ~ A1 + A2,   nvisit = 2,   reference = c(rep(0,2)),   comparator = c(rep(1,2)),   family = \"binomial\",   data = simdat,   wmean = weights$weights,   nboot = 50,   optim_method = \"BFGS\",   parallel = TRUE,   seed = 890123,   ncore = 2) str(model) #> List of 12 #>  $ RD_mean    : num 0.144 #>  $ RR_mean    : num 2.01 #>  $ OR_mean    : num 2.65 #>  $ RD_sd      : num 0.114 #>  $ RR_sd      : num 0.89 #>  $ OR_sd      : num 1.54 #>  $ RD_quantile: Named num [1:2] -0.0701 0.3418 #>   ..- attr(*, \"names\")= chr [1:2] \"2.5%\" \"97.5%\" #>  $ RR_quantile: Named num [1:2] 0.783 3.858 #>   ..- attr(*, \"names\")= chr [1:2] \"2.5%\" \"97.5%\" #>  $ OR_quantile: Named num [1:2] 0.71 5.6 #>   ..- attr(*, \"names\")= chr [1:2] \"2.5%\" \"97.5%\" #>  $ bootdata   :'data.frame': 50 obs. of  5 variables: #>   ..$ effect_reference : num [1:50] -1.324 -0.764 -1.38 -0.72 -1.32 ... #>   ..$ effect_comparator: num [1:50] -1.055 -0.99 -0.791 -1.095 -0.208 ... #>   ..$ RD               : num [1:50] 0.048 -0.0469 0.1109 -0.0766 0.2373 ... #>   ..$ RR               : num [1:50] 1.228 0.852 1.552 0.766 2.126 ... #>   ..$ OR               : num [1:50] 1.308 0.798 1.802 0.688 3.04 ... #>  $ reference  : num [1:2] 0 0 #>  $ comparator : num [1:2] 1 1 summary_bayesmsm(model) #>                  mean        sd        2.5%       97.5% #> Reference  -1.5288990 0.4200961 -2.19186433 -0.76989815 #> Comparator -0.7311807 0.3773963 -1.48230363 -0.07790247 #> RD          0.1438742 0.1142579 -0.07014922  0.34176216 #> RR          2.0126333 0.8902369  0.78330530  3.85792458 #> OR          2.6466136 1.5400240  0.71037105  5.59809693"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-nocensoring.html","id":"visualization-functions-plot_ate-plot_apo-plot_est_box","dir":"Articles","previous_headings":"","what":"Visualization functions: plot_ATE, plot_APO, plot_est_box","title":"`bayesmsm` for longitudinal data without right-censoring","text":"bayesmsm package also provides several functions visualizing results: plot_ATE, plot_APO, plot_est_box. functions help user better interpret estimated causal effects. plot_ATE function generates plot estimated ATE 95% credible interval.  Similarly, plot_APO function plots estimated APO reference comparator level effects.   plot_est_box function generates error bar plot estimated treatment effects (APO ATE) bootstrap samples.","code":"plot_ATE(model) plot_APO(model, \"effect_reference\") plot_APO(model, \"effect_comparator\") plot_est_box(model)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/articles/bayesmsm-nocensoring.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"`bayesmsm` for longitudinal data without right-censoring","text":"Saarela, O., Stephens, D. ., Moodie, E. E. M., & Klein, M. B. (2015). Bayesian estimation marginal structural models. Biometrics, 71(2), 279–288. https://doi.org/10.1111/biom.12269 Robins, J. M., Hernán, M. ., & Brumback, B. (2000). Marginal structural models causal inference epidemiology. Epidemiology, 11(5), 550–560. https://doi.org/10.1097/00001648-200009000-00011 Liu, K., Saarela, O., Feldman, B. M., & Pullenayegum, E. (2020). Estimation causal effects repeatedly measured outcomes Bayesian framework. Statistical Methods Medical Research, 29(9), 2507–2519. https://doi.org/10.1177/0962280219900362","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kuan Liu. Author, maintainer, copyright holder. Xiao Yan. Author. Martin Urner. Author.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liu K, Yan X, Urner M (2025). bayesmsm: Fitting Bayesian Marginal Structural Models Longitudinal Observational Data. R package version 1.0.0, https://github.com/Kuan-Liu-Lab/bayesmsm.","code":"@Manual{,   title = {bayesmsm: Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data},   author = {Kuan Liu and Xiao Yan and Martin Urner},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/Kuan-Liu-Lab/bayesmsm}, }"},{"path":[]},{"path":"https://kuan-liu-lab.github.io/bayesmsm/index.html","id":"overview","dir":"","previous_headings":"","what":"Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data","title":"Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data","text":"bayesmsm R package implements Bayesian marginal structural models estimate average treatment effect drawing causal inference time-varying treatment assignment confounding extension handle informative right-censoring. Bayesian marginal structural models semi-parametric approach features two-step estimation process. first step involves Bayesian parametric estimation time-varying treatment assignment models second step involves non-parametric Bayesian bootstrap estimate average treatment effect two distinct treatment sequences interest. Reference paper Bayesian marginal structural models: Saarela, O., Stephens, D. ., Moodie, E. E., & Klein, M. B. (2015). Bayesian estimation marginal structural models. Biometrics, 71(2), 279-288. Liu, K., Saarela, O., Feldman, B. M., & Pullenayegum, E. (2020). Estimation causal effects repeatedly measured outcomes Bayesian framework. Statistical methods medical research, 29(9), 2507-2519.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data","text":"Install using devtools package:","code":"## install.packages(devtools) ## make sure to have devtools installed  devtools::install_github(\"Kuan-Liu-Lab/bayesmsm\") library(bayesmsm)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/index.html","id":"dependency","dir":"","previous_headings":"","what":"Dependency","title":"Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data","text":"package depends following R packages: MCMCpack doParallel foreach parallel R2jags coda","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data","text":"examples demonstrating use bayesmsm package:","code":"# Load example data without right-censoring testdata <- read.csv(system.file(\"extdata\", \"continuous_outcome_data.csv\", package = \"bayesmsm\"))  # Load example data without right-censoring testdata <- read.csv(system.file(\"extdata\",                                  \"sim_causal.csv\",                                  package = \"bayesmsm\"))  # Calculate Bayesian weights weights <- bayesweight(   trtmodel.list = list(     A1 ~ L11 + L21,     A2 ~ L11 + L21 + L12 + L22 + A1,     A3 ~ L11 + L21 + L12 + L22 + A1 + L13 + L23 + A2   ),   data = testdata,   n.chains = 2,   n.iter = 250,   n.burnin = 150,   n.thin = 5,   seed = 890123,   parallel = TRUE )  # Perform Bayesian non-parametric bootstrap model <- bayesmsm(   ymodel = Y ~ A1 + A2 + A3,   nvisit = 3,   reference = c(rep(0,3)),   comparator = c(rep(1,3)),   treatment_effect_type = \"sq\",   family = \"binomial\",   data = testdata,   wmean = weights$weights,   nboot = 1000,   optim_method = \"BFGS\",   seed = 890123,   parallel = TRUE,   ncore = 2 )  # View model summary summary.bayesmsm(model)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data","text":"package licensed MIT License. See LICENSE file details.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data","text":"Please cite software using:","code":"@Manual{,   title = {bayesmsm: An R package for longitudinal causal analysis using Bayesian Marginal Structural Models},   author = {Xiao Yan and Martin Urner and Kuan Liu},   year = {2024},   note = {https://github.com/Kuan-Liu-Lab/bayesmsm},   url = {https://kuan-liu-lab.github.io/bayesmsm/}, }"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Fitting Bayesian Marginal Structural Models for Longitudinal Observational Data","text":"e-mail: kuan.liu@utoronto.ca, Clarence.YXA@gmail.com Please report bugs opening issue.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesmsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Marginal Structural Model Bootstrap Estimation — bayesmsm","title":"Bayesian Marginal Structural Model Bootstrap Estimation — bayesmsm","text":"function performs Bayesian non-parametric bootstrap estimate causal effects Bayesian marginal structural models. supports continuous (Gaussian) binary (binomial) outcome variables","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesmsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Marginal Structural Model Bootstrap Estimation — bayesmsm","text":"","code":"bayesmsm(   ymodel,   nvisit,   reference = c(rep(0, nvisit)),   comparator = c(rep(1, nvisit)),   treatment_effect_type = \"sq\",   family = \"gaussian\",   data,   wmean = rep(1, nrow(data)),   nboot = 1000,   optim_method = \"BFGS\",   seed = NULL,   parallel = TRUE,   ncore = 4 )"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesmsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Marginal Structural Model Bootstrap Estimation — bayesmsm","text":"ymodel Model statement outcome variable. nvisit Number visits time points simulate. reference Vector denoting intervention used reference across visits calculating risk ratio risk difference. default vector 0's length nvisit (.e. never treated). comparator Vector denoting intervention used comparator across visits calculating risk ratio risk difference. default vector 1's length nvisit (.e. always treated). treatment_effect_type Character string specifying type treatment effect estimate. Options \"sq\" sequential treatment effects, estimates effects specific treatment sequences across visits, \"cum\" cumulative treatment effects, assumes single cumulative treatment variable representing total exposure. default \"sq\". family Character string specifying outcome distribution family. possible distributions : \"Gaussian\" (default) continuous outcomes, \"binomial\" binary outcomes. data Data table containing variable names outcome model. wmean Vector treatment assignment weights. default rep(1, nrow(data)). nboot Integer specifying number bootstrap iterations. default 1000. optim_method Character string specifying optimization method used. default \"BFGS\". seed Starting seed simulations bootstrapping. default NULL. parallel Logical scalar indicating whether parallelize bootstrapping multiple cores. default TRUE. ncore Integer specifying number CPU cores use parallel simulation. argument required parallel set TRUE, default 4.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesmsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Marginal Structural Model Bootstrap Estimation — bayesmsm","text":"returns object class \"bayesmsm\" contains information data, model, etc. object class \"bayesmsm\" list containing least following components: \"mean\", mean bootstrap estimates; \"sd\", standard deviation bootstrap estimates; \"quantile\", 95% quantiles bootstrap estimates; \"bootdata\", data frame bootstrapped estimates; \"reference\", reference intervention level \"comparator\", comparison intervention level","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesmsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Marginal Structural Model Bootstrap Estimation — bayesmsm","text":"","code":"# 1) Specify simple treatment‐assignment models amodel <- list(   c(\"(Intercept)\" =  0, \"L1_1\" =  0.5, \"L2_1\" = -0.5),   c(\"(Intercept)\" =  0, \"L1_2\" =  0.5, \"L2_2\" = -0.5, \"A_prev\" = 0.3) ) # 2) Specify a continuous‐outcome model ymodel <- c(\"(Intercept)\" = 0,             \"A1\"         = 0.2,             \"A2\"         = 0.3,             \"L1_2\"       = 0.1,             \"L2_2\"       = -0.1) # 3) Simulate without right‐censoring testdata <- simData(   n                = 200,   n_visits         = 2,   covariate_counts = c(2, 2),   amodel           = amodel,   ymodel           = ymodel,   y_type           = \"continuous\",   right_censor     = FALSE,   seed             = 123) model <- bayesmsm(ymodel = Y ~ A1 + A2,                   nvisit = 2,                   reference = c(rep(0,2)),                   comparator = c(rep(1,2)),                   treatment_effect_type = \"sq\",                   family = \"binomial\",                   data = testdata,                   wmean = rep(1,200),                   nboot = 10,                   optim_method = \"BFGS\",                   seed = 890123,                   parallel = FALSE)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Treatment Effect Weight Estimation Using JAGS — bayesweight","title":"Bayesian Treatment Effect Weight Estimation Using JAGS — bayesweight","text":"function estimates Bayesian importance sampling weights time-varying treatment effects using specified models treatment time point via JAGS","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Treatment Effect Weight Estimation Using JAGS — bayesweight","text":"","code":"bayesweight(   trtmodel.list,   data,   n.chains = 2,   n.iter = 25000,   n.burnin = 15000,   n.thin = 5,   seed = NULL,   parallel = TRUE )"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Treatment Effect Weight Estimation Using JAGS — bayesweight","text":"trtmodel.list list formulas corresponding time point time-specific treatment variable left hand side pre-treatment covariates balanced right hand side. formulas must temporal order, must contain covariates balanced time point. Interactions functions covariates allowed. data data set form data frame containing variables \"trtmodel.list\". must wide data set exactly one row per unit. n.chains Integer specifying number MCMC chains run. Set 1 non-parallel computation. parallel computation, required use least 2 chains. default 2. n.iter Integer specifying total number iterations chain (including burn-). default 25000. n.burnin Integer specifying number burn-iterations chain. default 15000. n.thin Integer specifying thinning rate MCMC sampler. default 5. seed Starting seed JAGS model. default NULL. parallel Logical scalar indicating whether run MCMC chains parallel. default TRUE.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Treatment Effect Weight Estimation Using JAGS — bayesweight","text":"list calculated weights JAGS model, `weights` vector posterior mean weights, computed taking average weights across MCMC iterations `model_string` character JAGS model based input `trtmodel.list`.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Treatment Effect Weight Estimation Using JAGS — bayesweight","text":"","code":"# 1) Specify simple treatment‐assignment models amodel <- list(   c(\"(Intercept)\" =  0, \"L1_1\" =  0.5, \"L2_1\" = -0.5),   c(\"(Intercept)\" =  0, \"L1_2\" =  0.5, \"L2_2\" = -0.5, \"A_prev\" = 0.3) ) # 2) Specify a continuous‐outcome model ymodel <- c(\"(Intercept)\" = 0,             \"A1\"         = 0.2,             \"A2\"         = 0.3,             \"L1_2\"       = 0.1,             \"L2_2\"       = -0.1) # 3) Simulate without right‐censoring testdata <- simData(   n                = 200,   n_visits         = 2,   covariate_counts = c(2, 2),   amodel           = amodel,   ymodel           = ymodel,   y_type           = \"continuous\",   right_censor     = FALSE,   seed             = 123) weights <- bayesweight(trtmodel.list = list(                        A1 ~ L1_1 + L2_1,                        A2 ~ L2_2 + L2_2 + A1),                        data = testdata,                        n.chains = 1,                        n.iter = 20,                        n.burnin = 10,                        n.thin = 1,                        seed = 890123,                        parallel = FALSE) #> module glm loaded #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 800 #>    Unobserved stochastic nodes: 9 #>    Total graph size: 3223 #>  #> Initializing model #>  #> Warning: Some parameters have not converged with Geweke index > 1.96. More iterations may be needed. summary(weights) #>              Length Class  Mode      #> weights      200    -none- numeric   #> model_string   1    -none- character"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight_cen.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Treatment Effect Weight Estimation for Censored Data — bayesweight_cen","title":"Bayesian Treatment Effect Weight Estimation for Censored Data — bayesweight_cen","text":"function estimates Bayesian importance sampling weights treatment models censoring models across multiple time points via JAGS","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight_cen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Treatment Effect Weight Estimation for Censored Data — bayesweight_cen","text":"","code":"bayesweight_cen(   trtmodel.list,   cenmodel.list,   data,   n.chains = 2,   n.iter = 25000,   n.burnin = 15000,   n.thin = 5,   seed = NULL,   parallel = TRUE )"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight_cen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Treatment Effect Weight Estimation for Censored Data — bayesweight_cen","text":"trtmodel.list list formulas corresponding time point time-specific treatment variable left-hand side pre-treatment covariates balanced right-hand side. formulas must temporal order, must contain covariates balanced time point. Interactions functions covariates allowed. cenmodel.list list formulas censored data time point, censoring indicators left-hand side covariates right-hand side. formulas must temporal order, must contain covariates balanced time point. data data set form data frame containing variables \"trtmodel.list\" \"cenmodel.list\". must wide data set exactly one row per unit. n.chains Integer specifying number MCMC chains run. Set 1 non-parallel computation. parallel computation, required use least 2 chains. default 2. n.iter Integer specifying total number iterations chain (including burn-). default 25000. n.burnin Integer specifying number burn-iterations chain. default 15000. n.thin Integer specifying thinning rate MCMC sampler. default 5. seed Starting seed JAGS model. default NULL. parallel Logical scalar indicating whether run MCMC chains parallel. default TRUE.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight_cen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Treatment Effect Weight Estimation for Censored Data — bayesweight_cen","text":"list calculated weights JAGS model \"weights\" vector posterior mean weights, computed taking average weights across MCMC iterations `model_string` character JAGS model based input \"trtmodel.list\".","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/bayesweight_cen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Treatment Effect Weight Estimation for Censored Data — bayesweight_cen","text":"","code":"amodel <- list(  c(\"(Intercept)\" = -0.3, \"L1_1\" = 0.4, \"L2_1\" = -0.2),  c(\"(Intercept)\" = -0.1, \"L1_2\" = 0.3, \"L2_2\" = -0.1, \"A_prev\" = 0.5)) ymodel <- c( \"(Intercept)\" = -0.8, \"A1\"          = 0.2, \"A2\"          = 0.4, \"L1_2\"        = 0.3, \"L2_2\"        = -0.3) cmodel <- list(  c(\"(Intercept)\" = -1.5, \"L1_1\" = 0.2, \"L2_1\" = -0.2, \"A\" = 0.2),  c(\"(Intercept)\" = -1.5, \"L1_2\" = 0.1, \"L2_2\" = -0.1, \"A\" = 0.3)) testdata <- simData(  n                = 50,  n_visits         = 2,  covariate_counts = c(2, 2),  amodel           = amodel,  ymodel           = ymodel,  y_type           = \"binary\",  right_censor     = TRUE,  cmodel           = cmodel,  seed             = 123 ) weights_cen <- bayesweight_cen(                 trtmodel.list = list(                        A1 ~ L1_1 + L2_1,                        A2 ~ L2_2 + L2_2 + A1),                 cenmodel.list = list(                 C1 ~ L1_1 + L2_1 + A1,                 C2 ~ L1_2 + L2_2 + A2),                 data = testdata,                 n.chains = 1,                 n.iter = 20,                 n.burnin = 10,                 n.thin = 1,                 seed = 890123,                 parallel = FALSE) #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 360 #>    Unobserved stochastic nodes: 20 #>    Total graph size: 1264 #>  #> Initializing model #>  #> Warning: Some parameters have not converged with Geweke index > 1.96. More iterations may be needed. summary(weights_cen) #>              Length Class  Mode      #> weights      50     -none- numeric   #> model_string  1     -none- character"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/calculate_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"This function to calculate the causal effect of an intervention given the parameter estimates and intervention levels — calculate_effect","title":"This function to calculate the causal effect of an intervention given the parameter estimates and intervention levels — calculate_effect","text":"function calculate causal effect intervention given parameter estimates intervention levels","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/calculate_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function to calculate the causal effect of an intervention given the parameter estimates and intervention levels — calculate_effect","text":"","code":"calculate_effect(   intervention_levels,   variables,   param_estimates,   treatment_effect_type )"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/calculate_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function to calculate the causal effect of an intervention given the parameter estimates and intervention levels — calculate_effect","text":"intervention_levels numeric vector indicating levels intervention predictor variable. variables list names response variable predictor variables extracted model. param_estimates vector parameter estimates model. treatment_effect_type Character string specifying type treatment effect estimate. Options \"sq\" sequential treatment effects, estimates effects specific treatment sequences across visits, \"cum\" cumulative treatment effects, assumes single cumulative treatment variable representing total exposure. default \"sq\".","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/calculate_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function to calculate the causal effect of an intervention given the parameter estimates and intervention levels — calculate_effect","text":"numeric value representing calculated effect specified intervention.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_APO.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Average Potential Outcomes (APO) — plot_APO","title":"Plot Average Potential Outcomes (APO) — plot_APO","text":"function plots density APO specified effect type bayesmsm output.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_APO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Average Potential Outcomes (APO) — plot_APO","text":"","code":"plot_APO(input, effect_type, ...)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_APO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Average Potential Outcomes (APO) — plot_APO","text":"input data frame model object containing bootstrap results. effect_type character string specifying effect plot (e.g., comparator reference treatment sequences). ... Additional arguments passed plotting function.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_APO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Average Potential Outcomes (APO) — plot_APO","text":"ggplot object representing density plot showing distribution specified average potential outcome (reference comparison).","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_APO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Average Potential Outcomes (APO) — plot_APO","text":"","code":"# 1) Specify simple treatment‐assignment models amodel <- list(   c(\"(Intercept)\" =  0, \"L1_1\" =  0.5, \"L2_1\" = -0.5),   c(\"(Intercept)\" =  0, \"L1_2\" =  0.5, \"L2_2\" = -0.5, \"A_prev\" = 0.3) ) # 2) Specify a continuous‐outcome model ymodel <- c(\"(Intercept)\" = 0,             \"A1\"         = 0.2,             \"A2\"         = 0.3,             \"L1_2\"       = 0.1,             \"L2_2\"       = -0.1) # 3) Simulate without right‐censoring testdata <- simData(   n                = 200,   n_visits         = 2,   covariate_counts = c(2, 2),   amodel           = amodel,   ymodel           = ymodel,   y_type           = \"continuous\",   right_censor     = FALSE,   seed             = 123) model <- bayesmsm(ymodel = Y ~ A1 + A2,                   nvisit = 2,                   reference = c(rep(0,2)),                   comparator = c(rep(1,2)),                   treatment_effect_type = \"sq\",                   family = \"binomial\",                   data = testdata,                   wmean = rep(1,200),                   nboot = 10,                   optim_method = \"BFGS\",                   seed = 890123,                   parallel = FALSE) plot_APO(model$bootdata, effect_type = \"effect_comparator\")  plot_APO(model, effect_type = \"effect_reference\")"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_ATE.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Average Treatment Effect Density from bayesmsm output — plot_ATE","title":"Plot Average Treatment Effect Density from bayesmsm output — plot_ATE","text":"function plots density ATE bayesmsm output.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_ATE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Average Treatment Effect Density from bayesmsm output — plot_ATE","text":"","code":"plot_ATE(   input,   ATE = \"RD\",   col_density = \"blue\",   fill_density = \"lightblue\",   main = \"Posterior Predictive Distribution of Average Treatment Effect\",   xlab = \"ATE\",   ylab = \"Posterior Predictive Distribution\",   xlim = NULL,   ylim = NULL,   ... )"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_ATE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Average Treatment Effect Density from bayesmsm output — plot_ATE","text":"input model object, data frame vector containing bootstrap estimates ATE. ATE define causal estimand interest RD, , RR. col_density Color density plot (default \"blue\"). fill_density Fill color density plot (default \"lightblue\"). main Title plot (default \"Density ATE Estimates\"). xlab X-axis label (default \"ATE\"). ylab Y-axis label (default \"Density\"). xlim Limits x-axis (default NULL). ylim Limits y-axis (default NULL). ... Additional graphical parameters passed plot function.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_ATE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Average Treatment Effect Density from bayesmsm output — plot_ATE","text":"ggplot object representing density plot posterior predictive distribution Average Treatment Effect (ATE).","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_ATE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Average Treatment Effect Density from bayesmsm output — plot_ATE","text":"","code":"# 1) Specify simple treatment‐assignment models amodel <- list(   c(\"(Intercept)\" =  0, \"L1_1\" =  0.5, \"L2_1\" = -0.5),   c(\"(Intercept)\" =  0, \"L1_2\" =  0.5, \"L2_2\" = -0.5, \"A_prev\" = 0.3) ) # 2) Specify a continuous‐outcome model ymodel <- c(\"(Intercept)\" = 0,             \"A1\"         = 0.2,             \"A2\"         = 0.3,             \"L1_2\"       = 0.1,             \"L2_2\"       = -0.1) # 3) Simulate without right‐censoring testdata <- simData(   n                = 200,   n_visits         = 2,   covariate_counts = c(2, 2),   amodel           = amodel,   ymodel           = ymodel,   y_type           = \"continuous\",   right_censor     = FALSE,   seed             = 123) model <- bayesmsm(ymodel = Y ~ A1 + A2,                   nvisit = 2,                   reference = c(rep(0,2)),                   comparator = c(rep(1,2)),                   treatment_effect_type = \"sq\",                   family = \"binomial\",                   data = testdata,                   wmean = rep(1,200),                   nboot = 10,                   optim_method = \"BFGS\",                   seed = 890123,                   parallel = FALSE) plot_ATE(model)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_est_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Error bar plots for causal treatment effects — plot_est_box","title":"Error bar plots for causal treatment effects — plot_est_box","text":"function plots point estimates 95% credible intervals ATE APO bayesmsm output.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_est_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error bar plots for causal treatment effects — plot_est_box","text":"","code":"plot_est_box(input, ...)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_est_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error bar plots for causal treatment effects — plot_est_box","text":"input data frame model object containing bootstrap results. ... Additional arguments passed plotting function.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_est_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error bar plots for causal treatment effects — plot_est_box","text":"ggplot object presenting error bar plot mean effects 95% credible intervals comparator level, reference level, ATE.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/plot_est_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error bar plots for causal treatment effects — plot_est_box","text":"","code":"# 1) Specify simple treatment‐assignment models amodel <- list(   c(\"(Intercept)\" =  0, \"L1_1\" =  0.5, \"L2_1\" = -0.5),   c(\"(Intercept)\" =  0, \"L1_2\" =  0.5, \"L2_2\" = -0.5, \"A_prev\" = 0.3) ) # 2) Specify a continuous‐outcome model ymodel <- c(\"(Intercept)\" = 0,             \"A1\"         = 0.2,             \"A2\"         = 0.3,             \"L1_2\"       = 0.1,             \"L2_2\"       = -0.1) # 3) Simulate without right‐censoring testdata <- simData(   n                = 200,   n_visits         = 2,   covariate_counts = c(2, 2),   amodel           = amodel,   ymodel           = ymodel,   y_type           = \"continuous\",   right_censor     = FALSE,   seed             = 123) model <- bayesmsm(ymodel = Y ~ A1 + A2,                   nvisit = 2,                   reference = c(rep(0,2)),                   comparator = c(rep(1,2)),                   treatment_effect_type = \"sq\",                   family = \"binomial\",                   data = testdata,                   wmean = rep(1,200),                   nboot = 10,                   optim_method = \"BFGS\",                   seed = 890123,                   parallel = FALSE) plot_est_box(model)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/simData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate synthetic longitudinal data with optional right-censoring — simData","title":"Generate synthetic longitudinal data with optional right-censoring — simData","text":"function simulates repeated measurements normally-distributed covariates, binary treatments, end--study outcome longitudinal causal analyses. `right_censor = TRUE`, right-censoring indicator `Cj` generated visit: `Cj = 1`, subsequent `L`, ``, `Y` values set `NA`.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/simData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate synthetic longitudinal data with optional right-censoring — simData","text":"","code":"simData(   n,   n_visits,   covariate_counts = rep(2, n_visits),   amodel,   ymodel,   y_type = c(\"binary\", \"continuous\"),   right_censor = FALSE,   cmodel = NULL,   seed = NULL )"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/simData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate synthetic longitudinal data with optional right-censoring — simData","text":"n Integer. Sample size. n_visits Integer. Number visits (including baseline visit 1). covariate_counts Integer vector length `n_visits`. Number covariates per visit (default: rep(2, n_visits)). amodel List length `n_visits`. element named numeric vector coefficients logistic model treatment `Aj` covariates (`A_prev` j > 1). ymodel Named numeric vector. Coefficients end--study outcome model. `y_type = \"binary\"`, logistic model used; `\"continuous\"`, linear model Gaussian noise. y_type Character. One \"binary\" \"continuous\". right_censor Logical. TRUE, generates `Cj` using `cmodel` visit. cmodel List length `n_visits`. Named numeric vectors logistic censoring models visit, regressing `Cj` covariates current `Aj`. seed Integer. Optional random seed.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/simData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate synthetic longitudinal data with optional right-censoring — simData","text":"`data.frame` columns `Lk_j`, `Aj`, optional `Cj`, `Y`.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/summary_bayesmsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function to generate result table from bayesmsm — summary_bayesmsm","title":"Summary function to generate result table from bayesmsm — summary_bayesmsm","text":"function generates ready use result table contents estimated APO ATE 95% credible intervals","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/summary_bayesmsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function to generate result table from bayesmsm — summary_bayesmsm","text":"","code":"summary_bayesmsm(model)"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/summary_bayesmsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function to generate result table from bayesmsm — summary_bayesmsm","text":"model model object bayesmsm","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/summary_bayesmsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary function to generate result table from bayesmsm — summary_bayesmsm","text":"summary table results bayesmsm.","code":""},{"path":"https://kuan-liu-lab.github.io/bayesmsm/reference/summary_bayesmsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function to generate result table from bayesmsm — summary_bayesmsm","text":"","code":"# 1) Specify simple treatment‐assignment models amodel <- list(   c(\"(Intercept)\" =  0, \"L1_1\" =  0.5, \"L2_1\" = -0.5),   c(\"(Intercept)\" =  0, \"L1_2\" =  0.5, \"L2_2\" = -0.5, \"A_prev\" = 0.3) ) # 2) Specify a continuous‐outcome model ymodel <- c(\"(Intercept)\" = 0,             \"A1\"         = 0.2,             \"A2\"         = 0.3,             \"L1_2\"       = 0.1,             \"L2_2\"       = -0.1) # 3) Simulate without right‐censoring testdata <- simData(   n                = 200,   n_visits         = 2,   covariate_counts = c(2, 2),   amodel           = amodel,   ymodel           = ymodel,   y_type           = \"continuous\",   right_censor     = FALSE,   seed             = 123) model <- bayesmsm(ymodel = Y ~ A1 + A2,                   nvisit = 2,                   reference = c(rep(0,2)),                   comparator = c(rep(1,2)),                   treatment_effect_type = \"sq\",                   family = \"binomial\",                   data = testdata,                   wmean = rep(1,200),                   nboot = 10,                   optim_method = \"BFGS\",                   seed = 890123,                   parallel = FALSE) summary_bayesmsm(model) #>                     mean sd          2.5%         97.5% #> Reference  -9.637275e+00  0 -9.637275e+00 -9.637275e+00 #> Comparator  6.736958e+00  0  6.736958e+00  6.736958e+00 #> RD          9.987499e-01  0  9.987499e-01  9.987499e-01 #> RR          1.530837e+04  0  1.530837e+04  1.530837e+04 #> OR          1.291931e+07  0  1.291931e+07  1.291931e+07"},{"path":"https://kuan-liu-lab.github.io/bayesmsm/news/index.html","id":"bayesmsm-100","dir":"Changelog","previous_headings":"","what":"bayesmsm 1.0.0","title":"bayesmsm 1.0.0","text":"Initial CRAN submission.","code":""}]
